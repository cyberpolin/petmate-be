# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  phone: String
  email: String
  password: PasswordState
  owner: Owner
  pets(
    where: PetWhereInput! = {}
    orderBy: [PetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pet!]
  petsCount(where: PetWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  phone: StringFilter
  email: StringFilter
  owner: OwnerWhereInput
  pets: PetManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PetManyRelationFilter {
  every: PetWhereInput
  some: PetWhereInput
  none: PetWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  phone: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  phone: String
  email: String
  password: String
  owner: OwnerRelateToOneForUpdateInput
  pets: PetRelateToManyForUpdateInput
}

input OwnerRelateToOneForUpdateInput {
  create: OwnerCreateInput
  connect: OwnerWhereUniqueInput
  disconnect: Boolean
}

input PetRelateToManyForUpdateInput {
  disconnect: [PetWhereUniqueInput!]
  set: [PetWhereUniqueInput!]
  create: [PetCreateInput!]
  connect: [PetWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  phone: String
  email: String
  password: String
  owner: OwnerRelateToOneForCreateInput
  pets: PetRelateToManyForCreateInput
}

input OwnerRelateToOneForCreateInput {
  create: OwnerCreateInput
  connect: OwnerWhereUniqueInput
}

input PetRelateToManyForCreateInput {
  create: [PetCreateInput!]
  connect: [PetWhereUniqueInput!]
}

type Owner {
  id: ID!
  user: User
  name: String
  lastName: String
  birthDay: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input OwnerWhereUniqueInput {
  id: ID
}

input OwnerWhereInput {
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
  id: IDFilter
  user: UserWhereInput
  name: StringFilter
  lastName: StringFilter
  birthDay: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input OwnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  birthDay: OrderDirection
}

input OwnerUpdateInput {
  user: UserRelateToOneForUpdateInput
  name: String
  lastName: String
  birthDay: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input OwnerUpdateArgs {
  where: OwnerWhereUniqueInput!
  data: OwnerUpdateInput!
}

input OwnerCreateInput {
  user: UserRelateToOneForCreateInput
  name: String
  lastName: String
  birthDay: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Pet {
  id: ID!
  name: String
  owner: User
  breed: Breed
  images(
    where: PetImageWhereInput! = {}
    orderBy: [PetImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PetImage!]
  imagesCount(where: PetImageWhereInput! = {}): Int
}

input PetWhereUniqueInput {
  id: ID
}

input PetWhereInput {
  AND: [PetWhereInput!]
  OR: [PetWhereInput!]
  NOT: [PetWhereInput!]
  id: IDFilter
  name: StringFilter
  owner: UserWhereInput
  breed: BreedWhereInput
  images: PetImageManyRelationFilter
}

input PetImageManyRelationFilter {
  every: PetImageWhereInput
  some: PetImageWhereInput
  none: PetImageWhereInput
}

input PetOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PetUpdateInput {
  name: String
  owner: UserRelateToOneForUpdateInput
  breed: BreedRelateToOneForUpdateInput
  images: PetImageRelateToManyForUpdateInput
}

input BreedRelateToOneForUpdateInput {
  create: BreedCreateInput
  connect: BreedWhereUniqueInput
  disconnect: Boolean
}

input PetImageRelateToManyForUpdateInput {
  disconnect: [PetImageWhereUniqueInput!]
  set: [PetImageWhereUniqueInput!]
  create: [PetImageCreateInput!]
  connect: [PetImageWhereUniqueInput!]
}

input PetUpdateArgs {
  where: PetWhereUniqueInput!
  data: PetUpdateInput!
}

input PetCreateInput {
  name: String
  owner: UserRelateToOneForCreateInput
  breed: BreedRelateToOneForCreateInput
  images: PetImageRelateToManyForCreateInput
}

input BreedRelateToOneForCreateInput {
  create: BreedCreateInput
  connect: BreedWhereUniqueInput
}

input PetImageRelateToManyForCreateInput {
  create: [PetImageCreateInput!]
  connect: [PetImageWhereUniqueInput!]
}

type PetImage {
  id: ID!
  image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input PetImageWhereUniqueInput {
  id: ID
}

input PetImageWhereInput {
  AND: [PetImageWhereInput!]
  OR: [PetImageWhereInput!]
  NOT: [PetImageWhereInput!]
  id: IDFilter
}

input PetImageOrderByInput {
  id: OrderDirection
}

input PetImageUpdateInput {
  image: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input PetImageUpdateArgs {
  where: PetImageWhereUniqueInput!
  data: PetImageUpdateInput!
}

input PetImageCreateInput {
  image: Upload
}

type Breed {
  id: ID!
  name: String
  description: String
}

input BreedWhereUniqueInput {
  id: ID
}

input BreedWhereInput {
  AND: [BreedWhereInput!]
  OR: [BreedWhereInput!]
  NOT: [BreedWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input BreedOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input BreedUpdateInput {
  name: String
  description: String
}

input BreedUpdateArgs {
  where: BreedWhereUniqueInput!
  data: BreedUpdateInput!
}

input BreedCreateInput {
  name: String
  description: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createOwner(data: OwnerCreateInput!): Owner
  createOwners(data: [OwnerCreateInput!]!): [Owner]
  updateOwner(where: OwnerWhereUniqueInput!, data: OwnerUpdateInput!): Owner
  updateOwners(data: [OwnerUpdateArgs!]!): [Owner]
  deleteOwner(where: OwnerWhereUniqueInput!): Owner
  deleteOwners(where: [OwnerWhereUniqueInput!]!): [Owner]
  createPet(data: PetCreateInput!): Pet
  createPets(data: [PetCreateInput!]!): [Pet]
  updatePet(where: PetWhereUniqueInput!, data: PetUpdateInput!): Pet
  updatePets(data: [PetUpdateArgs!]!): [Pet]
  deletePet(where: PetWhereUniqueInput!): Pet
  deletePets(where: [PetWhereUniqueInput!]!): [Pet]
  createPetImage(data: PetImageCreateInput!): PetImage
  createPetImages(data: [PetImageCreateInput!]!): [PetImage]
  updatePetImage(
    where: PetImageWhereUniqueInput!
    data: PetImageUpdateInput!
  ): PetImage
  updatePetImages(data: [PetImageUpdateArgs!]!): [PetImage]
  deletePetImage(where: PetImageWhereUniqueInput!): PetImage
  deletePetImages(where: [PetImageWhereUniqueInput!]!): [PetImage]
  createBreed(data: BreedCreateInput!): Breed
  createBreeds(data: [BreedCreateInput!]!): [Breed]
  updateBreed(where: BreedWhereUniqueInput!, data: BreedUpdateInput!): Breed
  updateBreeds(data: [BreedUpdateArgs!]!): [Breed]
  deleteBreed(where: BreedWhereUniqueInput!): Breed
  deleteBreeds(where: [BreedWhereUniqueInput!]!): [Breed]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  createPetAndUser(
    name: String!
    ownerId: ID
    breedId: ID
    email: String
    phone: String
  ): PetUser
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  phone: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  owners(
    where: OwnerWhereInput! = {}
    orderBy: [OwnerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Owner!]
  owner(where: OwnerWhereUniqueInput!): Owner
  ownersCount(where: OwnerWhereInput! = {}): Int
  pets(
    where: PetWhereInput! = {}
    orderBy: [PetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pet!]
  pet(where: PetWhereUniqueInput!): Pet
  petsCount(where: PetWhereInput! = {}): Int
  petImages(
    where: PetImageWhereInput! = {}
    orderBy: [PetImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PetImage!]
  petImage(where: PetImageWhereUniqueInput!): PetImage
  petImagesCount(where: PetImageWhereInput! = {}): Int
  breeds(
    where: BreedWhereInput! = {}
    orderBy: [BreedOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Breed!]
  breed(where: BreedWhereUniqueInput!): Breed
  breedsCount(where: BreedWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type PetUser {
  pet: Pet
  pass: String
}

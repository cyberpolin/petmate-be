import { config, graphQLSchemaExtension } from '@keystone-6/core'

import db from './db'
import { withAuth, session } from './auth'
import lists from './lists'
import { mergeSchemas } from '@graphql-tools/schema'

const gql = String.raw

const extendGraphqlSchema = (schema) =>
  mergeSchemas({
    schemas: [schema],
    typeDefs: gql`
      type PetUser {
        pet: Pet
        pass: String
      }

      type Mutation {
        createPetAndUser(
          name: String!
          ownerId: ID
          breedId: ID
          email: String
          phone: String
        ): PetUser
      }
    `,
    resolvers: {
      Mutation: {
        createPetAndUser: async (_, variables, ctx) => {
          // TODO make this autogenerated
          const password = 'changeme'
          let pass

          // have session or id?
          let userId = ctx.session?.itemId || false
          //    if not  create a user
          if (!userId) {
            //create the user
            console.log('CREATE_USER')
            const newUser = await ctx.db.User.createOne({
              data: {
                phone: variables.phone,
                email: variables.email,
                password,
              },
            })
            userId = newUser.id
            pass = password
          }
          const newPet = await ctx.db.Pet.createOne({
            data: {
              name: variables.name,
              owner: {
                connect: {
                  id: userId,
                },
              },
              breed: {
                connect: {
                  id: variables.breedId,
                },
              },
            },
          })
          // select the user
          // create the pet

          return { pet: newPet, pass: pass || null }
        },
      },
    },
  })

export default config(
  withAuth({
    extendGraphqlSchema,
    lists,
    db,
    session,
    ui: {
      isAccessAllowed: (ctx) => !!ctx.session?.data,
    },
  })
)
